package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/heyjun3/notify-stock/graph/model"
)

// CreateNotification is the resolver for the createNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, input model.NotificationInput) (*model.Notification, error) {
	memberID, err := GetMemberID(ctx)
	if err != nil {
		return nil, err
	}
	notification, err := r.notificationCreator.Create(ctx, *memberID, input.Symbols, input.Time)
	if err != nil {
		return nil, err
	}
	targets := make([]*model.SymbolDetail, 0, len(notification.Targets))
	for _, target := range notification.Targets {
		targets = append(targets, &model.SymbolDetail{
			Symbol: target.Symbol,
		})
	}
	return &model.Notification{
		ID:      notification.ID.String(),
		Time:    notification.Time.Hour,
		Targets: targets,
	}, nil
}

// DeleteNotification is the resolver for the deleteNotification field.
func (r *mutationResolver) DeleteNotification(ctx context.Context) (string, error) {
	memberID, err := GetMemberID(ctx)
	if err != nil {
		return "", err
	}
	deletedNotification, err := r.notificationRepository.DeleteByMemberID(ctx, *memberID)
	if err != nil {
		return "", err
	}
	return deletedNotification[0].ID.String(), nil
}

// Hour is the resolver for the hour field.
func (r *notificationResolver) Hour(ctx context.Context, obj *model.Notification) (*time.Time, error) {
	hour := obj.Time.AddDate(2022, 0, 0)
	return &hour, nil
}

// Targets is the resolver for the targets field.
func (r *notificationResolver) Targets(ctx context.Context, obj *model.Notification) ([]*model.SymbolDetail, error) {
	symbols := make([]string, 0, len(obj.Targets))
	for _, target := range obj.Targets {
		symbols = append(symbols, target.Symbol)
	}
	details, err := r.loader.SymbolDetail.LoadMany(ctx, symbols)()
	if err != nil {
		return nil, errors.Join(err...)
	}
	return convertToSymbolDetails(details), nil
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (model.Node, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Symbol is the resolver for the symbol field.
func (r *queryResolver) Symbol(ctx context.Context, input model.SymbolInput) (*model.Symbol, error) {
	return &model.Symbol{
		ID:     input.Symbol,
		Symbol: input.Symbol,
	}, nil
}

// Symbols is the resolver for the symbols field.
func (r *queryResolver) Symbols(ctx context.Context, input *model.SymbolInput) ([]*model.Symbol, error) {
	if input == nil {
		symbols, err := r.symbolRepository.GetAll(ctx)
		if err != nil {
			return nil, err
		}

		sym := make([]*model.Symbol, 0, len(symbols))
		for _, symbol := range symbols {
			sym = append(sym, &model.Symbol{
				ID:     symbol.Symbol,
				Symbol: symbol.Symbol,
				Detail: &model.SymbolDetail{
					Symbol:         symbol.Symbol,
					ShortName:      symbol.ShortName,
					LongName:       symbol.LongName,
					Price:          symbol.MarketPrice.InexactFloat64(),
					Change:         symbol.Change(),
					ChangePercent:  symbol.ChangePercent(),
					CurrencySymbol: symbol.Currency.Symbol(),
				},
			})
		}
		return sym, nil
	}
	symbol, err := r.symbolRepository.Get(ctx, input.Symbol)
	if err != nil {
		return nil, err
	}
	return []*model.Symbol{
		{Symbol: symbol.Symbol},
	}, nil
}

// Notification is the resolver for the notification field.
func (r *queryResolver) Notification(ctx context.Context) (*model.Notification, error) {
	memberID, err := GetMemberID(ctx)
	if err != nil {
		return nil, err
	}
	notifications, err := r.notificationRepository.GetByMemberID(ctx, *memberID)
	if err != nil {
		return nil, err
	}
	if len(notifications) == 0 {
		r.logger.Info("not found notification")
		return nil, nil
	}
	targets := make([]*model.SymbolDetail, 0, len(notifications[0].Targets))
	for _, target := range notifications[0].Targets {
		targets = append(targets, &model.SymbolDetail{
			Symbol: target.Symbol,
		})
	}
	return &model.Notification{
		ID:      notifications[0].ID.String(),
		Time:    notifications[0].Time.Hour,
		Targets: targets,
	}, nil
}

// Notifications is the resolver for the notifications field.
func (r *queryResolver) Notifications(ctx context.Context) ([]*model.Notification, error) {
	return nil, fmt.Errorf("not implement")
}

// Detail is the resolver for the detail field.
func (r *symbolResolver) Detail(ctx context.Context, obj *model.Symbol) (*model.SymbolDetail, error) {
	return obj.Detail, nil
}

// Chart is the resolver for the chart field.
func (r *symbolResolver) Chart(ctx context.Context, obj *model.Symbol, input model.ChartInput) ([]*model.Stock, error) {
	if input.Symbol == nil {
		return []*model.Stock{}, nil
	}
	if *input.Symbol != obj.Symbol {
		return []*model.Stock{}, nil
	}
	stocks, err := r.stockRepository.GetStockByPeriod(ctx, obj.Symbol, input.Start, input.End)
	if err != nil {
		return nil, fmt.Errorf("failed to get stock by period: %w", err)
	}
	result := make([]*model.Stock, 0, len(stocks))
	for _, stock := range stocks {
		result = append(result, &model.Stock{
			Symbol:    obj.Symbol,
			Price:     stock.Close,
			Timestamp: stock.Timestamp.Format("2006/01/02"),
		})
	}
	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Notification returns NotificationResolver implementation.
func (r *Resolver) Notification() NotificationResolver { return &notificationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Symbol returns SymbolResolver implementation.
func (r *Resolver) Symbol() SymbolResolver { return &symbolResolver{r} }

type mutationResolver struct{ *Resolver }
type notificationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type symbolResolver struct{ *Resolver }
