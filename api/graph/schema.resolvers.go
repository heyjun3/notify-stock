package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"

	"github.com/heyjun3/notify-stock/graph/model"
)

// CreateNotification is the resolver for the createNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, input model.NotificationInput) (*model.Notification, error) {
	notification, err := r.notificationCreator.Create(
		ctx, input.Symbol, input.Email, input.Time,
	)
	if err != nil {
		return nil, err
	}
	return &model.Notification{
		ID:     notification.ID.String(),
		Symbol: notification.Symbol,
		Email:  notification.Email,
		Time:   notification.Time.Hour,
	}, nil
}

// Symbol is the resolver for the symbol field.
func (r *queryResolver) Symbol(ctx context.Context, input model.SymbolInput) (*model.Symbol, error) {
	return &model.Symbol{
		Symbol: input.Symbol,
	}, nil
}

// Symbols is the resolver for the symbols field.
func (r *queryResolver) Symbols(ctx context.Context, input *model.SymbolInput) ([]*model.Symbol, error) {
	if input == nil {
		symbols, err := r.symbolFetcher.FetchAll(ctx)
		if err != nil {
			return nil, err
		}

		sym := make([]*model.Symbol, 0, len(symbols))
		for _, symbol := range symbols {
			sym = append(sym, &model.Symbol{
				Symbol: symbol.Symbol,
				Detail: &model.SymbolDetail{
					Symbol:        symbol.Symbol,
					ShortName:     symbol.ShortName,
					LongName:      symbol.LongName,
					Price:         symbol.MarketPrice.InexactFloat64(),
					Change:        symbol.Change(),
					ChangePercent: symbol.ChangePercent(),
					CurrencySymbol: symbol.Currency.Symbol(),
				},
			})
		}
		return sym, nil
	}
	symbol, err := r.symbolFetcher.Fetch(ctx, input.Symbol)
	if err != nil {
		return nil, err
	}
	return []*model.Symbol{
		{Symbol: symbol.Symbol},
	}, nil
}

// CurrentStock is the resolver for the currentStock field.
func (r *symbolResolver) CurrentStock(ctx context.Context, obj *model.Symbol) (*model.Stock, error) {
	stock, err := r.stockRepository.GetLatestStock(ctx, obj.Symbol)
	if err != nil {
		return nil, err
	}
	return &model.Stock{
		Symbol:    obj.Symbol,
		Close:     stock.Close,
		Timestamp: stock.Timestamp,
	}, nil
}

// Detail is the resolver for the detail field.
func (r *symbolResolver) Detail(ctx context.Context, obj *model.Symbol) (*model.SymbolDetail, error) {
	r.logger.Info("Fetching symbol detail", "symbol", obj.Symbol)
	return obj.Detail, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Symbol returns SymbolResolver implementation.
func (r *Resolver) Symbol() SymbolResolver { return &symbolResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type symbolResolver struct{ *Resolver }
