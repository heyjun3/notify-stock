// Code generated by "enumer -type=Currency"; DO NOT EDIT.

package notifystock

import (
	"fmt"
	"strings"
)

const _CurrencyName = "JPYUSD"

var _CurrencyIndex = [...]uint8{0, 3, 6}

const _CurrencyLowerName = "jpyusd"

func (i Currency) String() string {
	i -= 1
	if i < 0 || i >= Currency(len(_CurrencyIndex)-1) {
		return fmt.Sprintf("Currency(%d)", i+1)
	}
	return _CurrencyName[_CurrencyIndex[i]:_CurrencyIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CurrencyNoOp() {
	var x [1]struct{}
	_ = x[JPY-(1)]
	_ = x[USD-(2)]
}

var _CurrencyValues = []Currency{JPY, USD}

var _CurrencyNameToValueMap = map[string]Currency{
	_CurrencyName[0:3]:      JPY,
	_CurrencyLowerName[0:3]: JPY,
	_CurrencyName[3:6]:      USD,
	_CurrencyLowerName[3:6]: USD,
}

var _CurrencyNames = []string{
	_CurrencyName[0:3],
	_CurrencyName[3:6],
}

// CurrencyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CurrencyString(s string) (Currency, error) {
	if val, ok := _CurrencyNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CurrencyNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Currency values", s)
}

// CurrencyValues returns all values of the enum
func CurrencyValues() []Currency {
	return _CurrencyValues
}

// CurrencyStrings returns a slice of all String values of the enum
func CurrencyStrings() []string {
	strs := make([]string, len(_CurrencyNames))
	copy(strs, _CurrencyNames)
	return strs
}

// IsACurrency returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Currency) IsACurrency() bool {
	for _, v := range _CurrencyValues {
		if i == v {
			return true
		}
	}
	return false
}
