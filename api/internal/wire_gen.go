// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package notifystock

import (
	"context"
	"github.com/uptrace/bun"
)

// Injectors from wire.go:

func InitStockRegister(dsn string, client HTTPClientInterface) *StockRegister {
	financeClient := NewFinanceClient(client)
	db := NewDB(dsn)
	stockRepository := NewStockRepository(db)
	symbolRepository := NewSymbolRepository(db)
	stockRegister := NewStockRegister(financeClient, stockRepository, symbolRepository)
	return stockRegister
}

func InitSymbolFetcher(dsn string) *SymbolFetcher {
	db := NewDB(dsn)
	symbolRepository := NewSymbolRepository(db)
	symbolFetcher := NewSymbolFetcher(symbolRepository)
	return symbolFetcher
}

func InitStockNotifier(ctx context.Context, token string, dsn DBDSN) (*StockNotifier, error) {
	emailClient := NewEmailClient(token)
	db := wrapOpenDB(dsn)
	stockRepository := NewStockRepository(db)
	symbolRepository := NewSymbolRepository(db)
	stockNotifier := NewStockNotifier(emailClient, stockRepository, symbolRepository)
	return stockNotifier, nil
}

func InitStockRepository(dsn string) *StockRepository {
	db := NewDB(dsn)
	stockRepository := NewStockRepository(db)
	return stockRepository
}

func InitNotificationRepository(dsn string) *NotificationRepository {
	db := NewDB(dsn)
	notificationRepository := NewNotificationRepository(db)
	return notificationRepository
}

// wire.go:

type DBDSN string

func wrapOpenDB(dsn DBDSN) *bun.DB {
	return NewDB(string(dsn))
}
